# This is a dummy file generated by `rails-annotate-solargraph`
# to extend solargraph's understanding of your Rails app.
# You should probably add it to `.gitignore`

# Some static comments to fill a few gaps
# in Rails comprehension.

class ActionController::Base
  include ActionController::MimeResponds
  include ActionController::Redirecting
  include ActionController::Cookies
  include AbstractController::Rendering
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::Rescuable::ClassMethods
  extend AbstractController::Callbacks::ClassMethods
  extend ActionController::RequestForgeryProtection::ClassMethods
end
class ActiveRecord::Base
  extend ActiveRecord::Reflection::ClassMethods
  extend ActiveModel::SecurePassword::ClassMethods
  extend ActiveModel::Attributes::ClassMethods
  include ActiveModel::Attributes
  include ActiveModel::Dirty
  extend ActiveRecord::Validations::ClassMethods
  include ActiveRecord::Validations
  extend ActiveModel::Validations::ClassMethods
  include ActiveModel::Validations
  extend ActiveRecord::Calculations
  extend ActiveRecord::Batches
  extend ActiveRecord::QueryMethods
  extend ActiveRecord::FinderMethods
  extend ActiveRecord::Associations::ClassMethods
  extend ActiveRecord::Inheritance::ClassMethods
  extend ActiveRecord::ModelSchema::ClassMethods
  extend ActiveRecord::Transactions::ClassMethods
  extend ActiveRecord::Scoping::Named::ClassMethods
  include ActiveRecord::Persistence

  # Registers a callback to be called after initialize.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_initialize(*args, &block); end
  # Registers a callback to be called after find.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_find(*args, &block); end
  # Registers a callback to be called after touch.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_touch(*args, &block); end
  # Registers a callback to be called before validation.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_validation(*args, &block); end
  # Registers a callback to be called after validation.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_validation(*args, &block); end
  # Registers a callback to be called before save.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_save(*args, &block); end
  # Registers a callback to be called around save.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_save(*args, &block); end
  # Registers a callback to be called after save.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_save(*args, &block); end
  # Registers a callback to be called before create.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_create(*args, &block); end
  # Registers a callback to be called around create.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_create(*args, &block); end
  # Registers a callback to be called after create.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_create(*args, &block); end
  # Registers a callback to be called before update.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_update(*args, &block); end
  # Registers a callback to be called around update.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_update(*args, &block); end
  # Registers a callback to be called after update.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_update(*args, &block); end
  # Registers a callback to be called before destroy.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.before_destroy(*args, &block); end
  # Registers a callback to be called around destroy.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.around_destroy(*args, &block); end
  # Registers a callback to be called after destroy.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_destroy(*args, &block); end
  # Registers a callback to be called after commit.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_commit(*args, &block); end
  # Registers a callback to be called after rollback.
  # See `ActiveRecord::Callbacks` for more information.
  # @return [void]
  def self.after_rollback(*args, &block); end

end
class Rails
  # @return [Rails::Application]
  def self.application; end
end
class Rails::Application
  # @return [ActionDispatch::Routing::RouteSet]
  def routes; end
end
class ActionDispatch::Routing::Mapper
  include ActionDispatch::Routing::Mapper::Base
  include ActionDispatch::Routing::Mapper::HttpHelpers
  include ActionDispatch::Routing::Mapper::Redirection
  include ActionDispatch::Routing::Mapper::Scoping
  include ActionDispatch::Routing::Mapper::Concerns
  include ActionDispatch::Routing::Mapper::Resources
  include ActionDispatch::Routing::Mapper::CustomUrls
end
class ActionDispatch::Routing::RouteSet
  # @yieldself [ActionDispatch::Routing::Mapper]
  def draw; end
end

# Dynamically generated documentation

# %%<RailsAnnotateSolargraph:Start:carts>%%

class Cart < ApplicationRecord
  # `has_many` relation with `LineItem`. Database column `line_items.cart_id`.
  # @param val [Array<LineItem>, nil]
  def line_items=(val); end
  # `has_many` relation with `LineItem`. Database column `line_items.cart_id`.
  # @return [Array<LineItem>, nil]
  def line_items; end
  # Database column `carts.id`, type: `integer`.
  # @param val [Integer, nil]
  def id=(val); end
  # Database column `carts.id`, type: `integer`.
  # @return [Integer, nil]
  def id; end
  # Database column `carts.created_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def created_at=(val); end
  # Database column `carts.created_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def created_at; end
  # Database column `carts.updated_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def updated_at=(val); end
  # Database column `carts.updated_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def updated_at; end
end
# %%<RailsAnnotateSolargraph:End:carts>%%


# %%<RailsAnnotateSolargraph:Start:line_items>%%

class LineItem < ApplicationRecord
  # `belongs_to` relation with `Cart`. Database column `line_items.cart_id`.
  # @param val [Cart, nil]
  def cart=(val); end
  # `belongs_to` relation with `Cart`. Database column `line_items.cart_id`.
  # @return [Cart, nil]
  def cart; end
  # `belongs_to` relation with `Product`. Database column `line_items.product_id`.
  # @param val [Product, nil]
  def product=(val); end
  # `belongs_to` relation with `Product`. Database column `line_items.product_id`.
  # @return [Product, nil]
  def product; end
  # Database column `line_items.id`, type: `integer`.
  # @param val [Integer, nil]
  def id=(val); end
  # Database column `line_items.id`, type: `integer`.
  # @return [Integer, nil]
  def id; end
  # Database column `line_items.product_id`, type: `integer`.
  # @param val [Integer, nil]
  def product_id=(val); end
  # Database column `line_items.product_id`, type: `integer`.
  # @return [Integer, nil]
  def product_id; end
  # Database column `line_items.cart_id`, type: `integer`.
  # @param val [Integer, nil]
  def cart_id=(val); end
  # Database column `line_items.cart_id`, type: `integer`.
  # @return [Integer, nil]
  def cart_id; end
  # Database column `line_items.created_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def created_at=(val); end
  # Database column `line_items.created_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def created_at; end
  # Database column `line_items.updated_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def updated_at=(val); end
  # Database column `line_items.updated_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def updated_at; end
  # Database column `line_items.quantity`, type: `integer`.
  # @param val [Integer, nil]
  def quantity=(val); end
  # Database column `line_items.quantity`, type: `integer`.
  # @return [Integer, nil]
  def quantity; end
  # Database column `line_items.order_id`, type: `integer`.
  # @param val [Integer, nil]
  def order_id=(val); end
  # Database column `line_items.order_id`, type: `integer`.
  # @return [Integer, nil]
  def order_id; end
end
# %%<RailsAnnotateSolargraph:End:line_items>%%


# %%<RailsAnnotateSolargraph:Start:orders>%%

class Order < ApplicationRecord
  # Database column `orders.id`, type: `integer`.
  # @param val [Integer, nil]
  def id=(val); end
  # Database column `orders.id`, type: `integer`.
  # @return [Integer, nil]
  def id; end
  # Database column `orders.name`, type: `string`.
  # @param val [String, nil]
  def name=(val); end
  # Database column `orders.name`, type: `string`.
  # @return [String, nil]
  def name; end
  # Database column `orders.address`, type: `text`.
  # @param val [String, nil]
  def address=(val); end
  # Database column `orders.address`, type: `text`.
  # @return [String, nil]
  def address; end
  # Database column `orders.email`, type: `string`.
  # @param val [String, nil]
  def email=(val); end
  # Database column `orders.email`, type: `string`.
  # @return [String, nil]
  def email; end
  # Database column `orders.pay_type`, type: `integer`.
  # @param val [Integer, nil]
  def pay_type=(val); end
  # Database column `orders.pay_type`, type: `integer`.
  # @return [Integer, nil]
  def pay_type; end
  # Database column `orders.created_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def created_at=(val); end
  # Database column `orders.created_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def created_at; end
  # Database column `orders.updated_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def updated_at=(val); end
  # Database column `orders.updated_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def updated_at; end
end
# %%<RailsAnnotateSolargraph:End:orders>%%


# %%<RailsAnnotateSolargraph:Start:products>%%

class Product < ApplicationRecord
  # `has_many` relation with `LineItem`. Database column `line_items.product_id`.
  # @param val [Array<LineItem>, nil]
  def line_items=(val); end
  # `has_many` relation with `LineItem`. Database column `line_items.product_id`.
  # @return [Array<LineItem>, nil]
  def line_items; end
  # Database column `products.id`, type: `integer`.
  # @param val [Integer, nil]
  def id=(val); end
  # Database column `products.id`, type: `integer`.
  # @return [Integer, nil]
  def id; end
  # Database column `products.title`, type: `string`.
  # @param val [String, nil]
  def title=(val); end
  # Database column `products.title`, type: `string`.
  # @return [String, nil]
  def title; end
  # Database column `products.description`, type: `text`.
  # @param val [String, nil]
  def description=(val); end
  # Database column `products.description`, type: `text`.
  # @return [String, nil]
  def description; end
  # Database column `products.image_url`, type: `string`.
  # @param val [String, nil]
  def image_url=(val); end
  # Database column `products.image_url`, type: `string`.
  # @return [String, nil]
  def image_url; end
  # Database column `products.price`, type: `decimal`.
  # @param val [BigDecimal, nil]
  def price=(val); end
  # Database column `products.price`, type: `decimal`.
  # @return [BigDecimal, nil]
  def price; end
  # Database column `products.created_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def created_at=(val); end
  # Database column `products.created_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def created_at; end
  # Database column `products.updated_at`, type: `datetime`.
  # @param val [ActiveSupport::TimeWithZone, nil]
  def updated_at=(val); end
  # Database column `products.updated_at`, type: `datetime`.
  # @return [ActiveSupport::TimeWithZone, nil]
  def updated_at; end
end
# %%<RailsAnnotateSolargraph:End:products>%%

